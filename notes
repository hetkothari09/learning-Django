DJANGO

1. Django is basically a python framework like FLASK, which allows you to
    create websites while using python at the backend.

2. A basic website is created with the help of the following components:
    HTML CSS and JAVASCRIPT

3. Consider a CAR as a website. Then:
    metallic body - HTML
    colors, style - CSS
    Engine, parts - JAVASCRIPT

4. All commands:
    to create a project - django-admin startproject PROJECTNAME
    to start the server - python manage.py runserver (after coming in the project directory)
    to create an app - python manage.py startapp APPNAME (out of the project directory)

5. Steps:
    run all the commands
    create urls.py file in the app directory
    copy the code from project's urls.py to app's urls.py
    refactor all the url paths and their specific destination websites
    create static and templates folder

6. To serve your static folder files when user comes through static/ path add the         below code to settings.py in the project app's directory.

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static")
]

7. command - python manage.py mnakemigrations 
This command is used to check if you have made any changes to the schema of the present database.

8. command - python manage.py migrate
This command helps us in creating default Django tables in the database.
These default tables include the one used for authentication. Django has inbuilt authentication system. 

9. You can visit the Django admin website by : localhost(port)/admin (eg. 127.0.0.1:8000/admin)

10. command - python manage.py createsuperuser
You can create super user with this command. A super user is a user with all the privileges.

11. The details filled while creating a super-user, is automatically fed into the database. Django handles this.

12. To change the text of the admin website you can use the below code, paste this code in project's urls.py:
	admin.site.site_header = XYZ
	admin.site.site_title = XYZ
	admin.site.index_title = XYZ

13. You can inherit templates into different templates which makes the work easier if you need to make any changes later on. You have to use the 'block' tags in the places you want to inherit.

eg: {% block body %}
    {% endblock body %}    <---- the place needing inherited text



    {% extends "XYZ.html" %} 

    {% block body %}
	This is a body text
    {% endblock body %}    <----- The place that sends the inherited text to the first file


14. When you want to submit a form in your website you need to include a CSRF token in the code. Django has an inbuilt mechanism to prevent malicious attacks. Each user session has a unique CSRF token generated, thus when submitting the server checks and verifies the token received.

code : {% csrf_token %}


15. A MODEL in Django is an interface between application and the database which defines the structure of the database and provides methods for interacting with the data. Basically its like creating a table in the database.


16. After defining your table in models.py, you need to run the command "python manage.py makemigrations". This command asks Django to create a file for all the changes made.

17. Before running this command, you need to make a few changes, 
	a. In admin.py you need to register your new model (eg. contact), so that you 	can view the model from your admin site. 
	[[[ from xyz.models import MODELNAME
	admin.site.register(MODELNAME) ]]]

	b. From apps.py, copy the name of your app and paste it in settings.py -> 	installed apps section.
	[[[   PROJECTAPPNAME.apps.COPIEDNAME   ]]]

18. After making these changes run the command "python manage.py makemigrations". This will generate a migration file consisting all the changes. Still there has been no change made in the database.

19. After running the above command, run "python manage.py migrate". This command will  finally create the table in the database. And now you can also view the database in your admin site as well.

20. for flash messages on submit, etc.: 
from django.contrib.messages import constants as messages -- in settings.py file
from django.contrib import messages -- in views.py
then you can use: messages.success(request, "MESSAGE")
		  messages.error, etc.



